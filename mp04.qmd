---
title: " Mini-Project #04: Monte Carlo-Informed Selection of CUNY Retirement Plans"
author: "Juan Camilo Martinez Benavides"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

## Introduction

Selecting a retirement plan is one of the most critical financial decisions for new CUNY faculty, as it has permanent implications for their long-term financial security. Once chosen, the plan cannot be changed, making it essential to consider the potential risks and rewards. This project evaluates the Teachers Retirement System (TRS) and the Optional Retirement Plan (ORP) using historical economic data and Monte Carlo simulations. By modeling contributions, investment returns, and inflation-adjusted benefits, we aim to provide a personalized, data-driven recommendation tailored to individual financial goals and risk tolerance.

## Objectives

The primary goal of this project is to equip new CUNY faculty with an evidence-based recommendation for selecting the optimal retirement plan (TRS or ORP). This involves analyzing historical economic and financial data to assess how each plan performs under different economic conditions. We will utilize the following datasets:

-   Rate of Inflation: Inflation erodes the purchasing power of retirement benefits. For TRS, it determines the annual adjustment in benefits, while for ORP, it impacts the real value of savings and withdrawals.
-   Rate of Wage Growth: Wage growth directly influences contributions to both plans. For TRS, it affects the final average salary (FAS), which determines retirement payouts. For ORP, higher wages lead to larger investment contributions.
-   US Equity Market Returns: Equity market performance is crucial for ORP participants, as their investments grow with market returns. US equities represent a significant portion of most retirement portfolios.
-   International Equity Market Returns: Diversification through international equities reduces risk and enhances returns for ORP participants. It provides a broader perspective on investment performance beyond the US market.
-   Bond Returns: Bonds are a critical component of retirement portfolios, especially for ORP participants as they approach retirement. Bonds provide stability and reduce volatility in investment returns.
-   Short-Term Debt Returns: Short-term debt, such as Treasury yields, represents a safe investment option with lower risk. It is particularly relevant for retirees seeking liquidity and capital preservation.

By combining insights from these datasets, we will simulate potential retirement outcomes for each plan, identify risks such as running out of funds, and quantify the financial benefits of each option. This comprehensive approach ensures that our recommendation aligns with the diverse financial priorities of faculty members.

### Libraries

The following are the libraries we would use throughtout the project.

```{r}
#| echo: true
#| message: false
#| warning: false
#| code-fold: true
#| code-summary: "Show the code"
library(httr2)    # For API requests
library(dplyr)    # For data manipulation
library(ggplot2)  # For visualization
library(zoo)      # For handling time-series data and filling missing values
library(DT)
library(ggcorrplot)
library(lubridate)

```

## Data Collection

For this project, we will use data from two economic and financial data sources:

1.  **AlphaVantage**: A commercial stock market data provider.
2.  **FRED**: The Federal Reserve Economic Data repository maintained by the Federal Reserve Bank of St. Louis.

FRED is free to access, but AlphaVantage is a commercial service requiring a subscription. For this mini-project, the free tier of AlphaVantage will suffice.

### Links to Resources

-   [AlphaVantage](https://www.alphavantage.co)
-   [FRED (Federal Reserve Economic Data)](https://fred.stlouisfed.org)

## DATA COLLECTION

We would proceed to collect the data from the sources mentioned above. and we would do it on a monthly basis for the last 15 years.

To do so, we would use their APIs:

```{r}
# Define the base URL for the FRED API
fred_url <- "https://api.stlouisfed.org/fred/series/observations"

# Define the base URL for the AlphaVantage API
alphavantage_url <- "https://www.alphavantage.co/query"

# Read FRED API key from a file
fred_key <- readLines("fred_key.txt") # Ensure this file contains only your FRED API key

# Read AlphaVantage API key from a file
alphavantage_key <- readLines("alphavantage_key.txt") # Ensure this file contains only your AlphaVantage API key

# Montly basis for the last 15 years
Time_Montly =as.Date("2009-01-01")
```

## Fetching Data

We already have the links to the resources and the API keys, now we can proceed to fetch the data.

-   1.Fetching Rate of Inflation (CPI for NYC Metro Area) from FRED

```{r}
#| echo: true
#| message: false
#| warning: false
# Fetch Inflation Data from FRED (CPI for NYC Metro Area)
inflation_req <- request(fred_url) |>
  req_url_query(
    series_id = "CUUR0400SA0",  # CPI for All Urban Consumers: NYC Metro Area
    api_key = fred_key,
    file_type = "json"
  )

inflation_resp <- inflation_req |> req_perform()
inflation_data <- resp_body_json(inflation_resp)$observations

# Convert to DataFrame
inflation_df <- data.frame(
  date = as.Date(sapply(inflation_data, function(x) x$date)),
  inflation_rate = as.numeric(sapply(inflation_data, function(x) x$value))
)

# Filter the data for the last 15 years
inflation_df <- inflation_df |> filter(date >= Time_Montly)
```

- 2. Fetching Rate of Wage Growth from FRED, We’ll use the AHETPI series to measure wage growth.

```{r}
# Fetch Wage Growth Data from FRED
wage_growth_req <- request(fred_url) |>
  req_url_query(
    series_id = "AHETPI", # Average Hourly Earnings of Production and Nonsupervisory Employees
    api_key = fred_key,
    file_type = "json"
  )

wage_growth_resp <- wage_growth_req |> req_perform()
wage_growth_data <- resp_body_json(wage_growth_resp)$observations

# Convert to a DataFrame
wage_growth_df <- data.frame(
  date = as.Date(sapply(wage_growth_data, function(x) x$date)), # Parse date
  wage_growth = as.numeric(sapply(wage_growth_data, function(x) x$value)) # Convert to numeric
)

# Filter data for the last 15–20 years
wage_growth_df <- wage_growth_df |> filter(date >= Time_Montly)
```

- 3. Fetching US Equity Market Returns from AlphaVantage

```{r}
# Fetch US Equity Market Data from AlphaVantage
us_equity_req <- request(alphavantage_url) |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED",
    symbol = "SPY", # S&P 500 ETF
    apikey = alphavantage_key
  )
us_equity_resp <- us_equity_req |> req_perform()
us_equity_data <- resp_body_json(us_equity_resp)$`Monthly Adjusted Time Series`

# Convert to DataFrame
us_equity_df <- data.frame(
  date = as.Date(names(us_equity_data)), # Extract dates
  us_equity_close = as.numeric(sapply(us_equity_data, function(x) x$`5. adjusted close`)) # Extract adjusted close prices
)

# Standardize dates to the first of each month
us_equity_df$date <- as.Date(format(us_equity_df$date, "%Y-%m-01"))

# Filter for the past 15 years
us_equity_df <- us_equity_df |> filter(date >= Time_Montly)
```

- 4. Fetching International Equity Market Returns from AlphaVantage

```{r}
# Fetch International Equity Market Data from AlphaVantage
intl_req <- request(alphavantage_url) |>
  req_url_query(
    `function` = "TIME_SERIES_MONTHLY_ADJUSTED",
    symbol = "VEA", # Vanguard FTSE Developed Markets ETF
    apikey = alphavantage_key
  )

intl_resp <- intl_req |> req_perform()
intl_data <- resp_body_json(intl_resp)$`Monthly Adjusted Time Series`

# Convert the fetched data into a data frame
intl_equity_df <- data.frame(
  date = as.Date(names(intl_data)),
  intl_equity_close = as.numeric(sapply(intl_data, function(x) x$`5. adjusted close`))
)

# Standardize dates to the first of each month
intl_equity_df$date <- as.Date(format(intl_equity_df$date, "%Y-%m-01"))

# Filter for the past 15 years
intl_equity_df <- intl_equity_df |> filter(date >= Time_Montly)
```

- 5. Fetching Bond Returns from AlphaVantage

```{r}
#| echo: true
#| message: false
#| warning: false
# Fetch Bond Yield Data (Daily)
bond_req <- request(fred_url) |>
  req_url_query(
    series_id = "DGS10", # 10-Year Treasury Yield
    api_key = fred_key,
    file_type = "json"
  )

bond_resp <- bond_req |> req_perform()
bond_data <- resp_body_json(bond_resp)$observations

# Convert to DataFrame
bond_df <- data.frame(
  date = as.Date(sapply(bond_data, function(x) x$date)),
  bond_yield = as.numeric(sapply(bond_data, function(x) x$value))
)

# Downsample to Monthly Averages
bond_df <- bond_df |>
  mutate(month = format(date, "%Y-%m")) |># Extract year-month for grouping
  group_by(month) |>
  summarize(
    bond_yield = mean(bond_yield, na.rm = TRUE), # Average yield for the month
    .groups = "drop"
  ) |>
  mutate(date = as.Date(paste0(month, "-01"))) |># Convert back to Date
  select(date, bond_yield)

# Filter for the last 15 years
bond_df <- bond_df |> filter(date >= Time_Montly)
```

- 6.  Fetching Short-Term Debt Returns from AlphaVantage: for this dataset, we need to downsample the daily data to monthly averages to align with the other datasets.

```{r}
#| echo: true
#| message: false
#| warning: false
# Fetch Short-Term Debt Data (2-Year Treasury Yield) - Attempt Monthly Query
short_term_req <- request(fred_url) |>
  req_url_query(
    series_id = "DGS2", # 2-Year Treasury Yield
    frequency = "m", # Request monthly data directly
    api_key = fred_key,
    file_type = "json"
  )

short_term_resp <- short_term_req |> req_perform()
short_term_data <- resp_body_json(short_term_resp)$observations

# Convert JSON to DataFrame
short_term_df <- data.frame(
  date = as.Date(sapply(short_term_data, function(x) x$date), format = "%Y-%m-%d"),
  short_term_yield = as.numeric(sapply(short_term_data, function(x) x$value))
)

# Filter for the Last 15 Years
short_term_df <- short_term_df |> filter(date >= Time_Montly)
```

## Data Preprocessing and Cleaning

Now that we have collected the data, we can proceed to the next step, which is data preprocessing. We we gonna unify the data and deal with missing values by using bootstrapping.

```{r}
#| echo: true
#| message: false
#| warning: false

# Standardize dates to the first of each month for all datasets
datasets <- list(inflation_df, wage_growth_df, us_equity_df, intl_equity_df, bond_df, short_term_df)
datasets <- datasets |>
  lapply(\(df) {
    df$date <- as.Date(format(df$date, "%Y-%m-01"))
    df
  })

# Unpack datasets back
inflation_df <- datasets[[1]]
wage_growth_df <- datasets[[2]]
us_equity_df <- datasets[[3]]
intl_equity_df <- datasets[[4]]
bond_df <- datasets[[5]]
short_term_df <- datasets[[6]]

# Create master date sequence
date_seq <- data.frame(date = seq(from = as.Date("2009-01-01"), 
                                  to = as.Date(format(Sys.Date(), "2024-10-01")), 
                                  by = "month"))

# Perform left joins for all datasets
combined_data <- date_seq |>
  left_join(inflation_df, by = "date") |>
  left_join(wage_growth_df, by = "date") |>
  left_join(us_equity_df, by = "date") |>
  left_join(intl_equity_df, by = "date") |>
  left_join(bond_df, by = "date") |>
  left_join(short_term_df, by = "date")

# Handle missing data
combined_data <- combined_data |>
  mutate(
    inflation_rate = replace(inflation_rate,
                             is.na(inflation_rate),
                             sample(na.omit(inflation_rate), size = sum(is.na(inflation_rate)), replace = TRUE)),
    wage_growth = replace(wage_growth,
                          is.na(wage_growth),
                          sample(na.omit(wage_growth), size = sum(is.na(wage_growth)), replace = TRUE)),
    us_equity_close = replace(us_equity_close,
                              is.na(us_equity_close),
                              sample(na.omit(us_equity_close), size = sum(is.na(us_equity_close)), replace = TRUE)),
    intl_equity_close = replace(intl_equity_close,
                                is.na(intl_equity_close),
                                sample(na.omit(intl_equity_close), size = sum(is.na(intl_equity_close)), replace = TRUE)),
    bond_yield = replace(bond_yield,
                         is.na(bond_yield),
                         sample(na.omit(bond_yield), size = sum(is.na(bond_yield)), replace = TRUE)),
    short_term_yield = replace(short_term_yield,
                               is.na(short_term_yield),
                               sample(na.omit(short_term_yield), size = sum(is.na(short_term_yield)), replace = TRUE))
  ) |>
  mutate(across(where(is.numeric), ~ round(., 2)))

# Display dataset interactively
DT::datatable(combined_data, options = list(pageLength = 10, scrollX = TRUE))
```

## Initial Analysis

Now that we have a clean dataset, we can perform some initial analysis to understand the trends and relationships between the variables.

We will visualize the data using line plots and we going to display them in pairs to compare the trends between the variables. so it would be inflation rate and wage growth, US equity and International equity, and Bond Yield and Short-Term Yield.

```{r}
# Create plot for Inflation Rate and Wage Growth with corrected labels and separate y-axes
p1 <- ggplot(combined_data, aes(x = date)) +
  # Inflation Rate
  geom_line(aes(y = inflation_rate), color = "blue") +
  scale_y_continuous(
    name = "Inflation Rate Value (NYC)",  # Corrected label for inflation rate
    sec.axis = sec_axis(~ . * 0, name = " ")  # Create empty secondary axis for separation
  ) +
  # Wage Growth (scaled for visibility)
  geom_line(aes(y = wage_growth * 10), color = "green") +
  scale_y_continuous(
    name = "Inflation Rate Value (NYC)",  # Corrected label for wage growth
    sec.axis = sec_axis(~ . / 10, name = "Wage Growth (Hourly Earnings in $)")  # Corrected secondary label
  ) +
  labs(title = "Inflation Rate and Wage Growth Over Time", x = "Date") +
  theme_minimal() +
  theme(
    axis.title.y.left = element_text(color = "blue", size = 12),
    axis.title.y.right = element_text(color = "green", size = 12)
  )

# Create plot for US Equity and International Equity
p2 <- ggplot(combined_data, aes(x = date)) +
  # US Equity Return
  geom_line(aes(y = us_equity_close), color = "red") +  
  scale_y_continuous(
    name = "US Equity Return (Adjusted Close)"  
  ) +
  # International Equity Return (scaled for visibility)
  geom_line(aes(y = intl_equity_close * 10), color = "purple") +  
  scale_y_continuous(
    name = "US Equity Return (Adjusted Close)",
    sec.axis = sec_axis(~ . / 10, name = "Intl Equity Return")  
  ) +
  labs(title = "US and International Equity Returns Over Time", x = "Date") +
  theme_minimal() +
  theme(
    axis.title.y.left = element_text(color = "red", size = 12),
    axis.title.y.right = element_text(color = "purple", size = 12)
  )

# Create plot for Bond Yield and Short-Term Yield 
p3 <- ggplot(combined_data, aes(x = date)) +
  # Bond Yield
  geom_line(aes(y = bond_yield * 2), color = "orange") +  
  scale_y_continuous(
    name = "Bond Yield (%)", 
    sec.axis = sec_axis(~ . / 2, name = "Bond Yield (%)")  
  ) +
  # Short-Term Yield
  geom_line(aes(y = short_term_yield * 2), color = "brown") +  
  scale_y_continuous(
    name = "Short-Term Yield (%)", 
    sec.axis = sec_axis(~ . / 2, name = "Short-Term Yield (%)")  
  ) +
  labs(title = "Bond Yield and Short-Term Yield Over Time", x = "Date") +
  theme_minimal() +
  theme(
    axis.title.y.left = element_text(color = "orange", size = 12),
    axis.title.y.right = element_text(color = "brown", size = 12)
  )

# Display all three plots
p1
p2
p3

```

We can see a clear correlation between some of this plots. For example, the inflation rate and wage growth are highly correlated, as well as the US and International Equity Returns.

### Correlation matrix

We will calculate the correlation matrix to understand the relationships between the variables. This will help us identify any significant correlations that can inform our analysis and decision-making process.

```{r}
# Select only numeric columns
numeric_data <- combined_data %>%
  select(where(is.numeric))

# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "complete.obs")

# Visualize the correlation matrix using ggcorrplot
ggcorrplot(cor_matrix, 
           type = "lower",          # Only show the lower triangle
           lab = TRUE,              # Show correlation coefficient labels
           lab_size = 3,            # Adjust label size
           method = "circle",       # Use circle shapes for correlation values
           colors = c("red", "white", "blue"), # Color scale
           title = "Correlation Matrix", # Plot title
           ggtheme = theme_minimal(), # Minimalistic theme
           tl.cex = 12,             # Title label size
           tl.col = "black"         # Title text color
)
```

# Key Findings on Economic Factors and Retirement Planning

In this analysis, we examine the relationships between several key economic factors, including inflation, wage growth, stock market returns (both US and international), bond yields, and short-term debt yields. Understanding how these factors are correlated can provide valuable insights for making informed financial decisions, particularly for retirement planning.

## Key Findings:

### 1. Inflation Rate and Wage Growth:

-   **Correlation**: 0.98 (Very strong)
-   **Interpretation**: When inflation increases, wage growth tends to follow suit. This suggests that as the cost of living rises, your wages are likely to increase as well, which helps you keep up with inflation.

### 2. Stock Market Returns:

#### US and International Markets:

-   **Correlation**: 0.97 (Very strong)
-   **Interpretation**: US and international stock markets have a highly positive correlation, meaning they often move in the same direction. This makes diversification between US and international markets a good strategy for reducing risk while maintaining growth potential.

#### US Equity Returns and Bond Yields:

-   **Correlation**: 0.68 (Moderate)
-   **Interpretation**: The moderate correlation suggests that when US stocks perform well, bond yields may not follow the same trend. Investors need to balance their portfolios between stocks and bonds, taking into account their risk tolerance and time horizon.

### 3. Inflation and Other Variables:

#### Inflation and US Stock Returns:

-   **Correlation**: 0.92 (Strong)
-   **Interpretation**: Inflation and US stock returns are highly correlated. As inflation rises, US stocks tend to perform well, making stocks a potential hedge against inflation.

#### Inflation and International Stock Returns:

-   **Correlation**: 0.97 (Very strong)
-   **Interpretation**: Like US stocks, international stocks also tend to rise with inflation, making global diversification a viable strategy for mitigating inflation risk.

#### Inflation and Bond Yields:

-   **Correlation**: 0.72 (Moderate)
-   **Interpretation**: Inflation and bond yields are moderately correlated. Rising inflation generally leads to higher bond yields, which can help protect fixed-income investments from losing purchasing power.

### 4. Bond Yield and Short-Term Yield:

-   **Correlation**: 0.75 (Strong)
-   **Interpretation**: Bond yields and short-term yields tend to move in the same direction, which suggests that both types of bonds respond similarly to changes in interest rates.

## Implications for Retirement Planning:

-   **Wage Growth and Inflation**: The close correlation between wage growth and inflation means that as prices rise, your income should likely increase, helping you maintain purchasing power in retirement.

-   **Equity Market Performance**: The strong correlation between US and international equity returns allows for diversification between these markets without sacrificing performance.

-   **Bonds and Short-Term Yields**: Understanding the relationship between bonds and short-term debt yields is crucial for managing fixed-income investments in a rising interest rate environment.

# Historical Comparison of TRS and ORP

### TRS vs. ORP: Retirement Comparison

## Initial Setup and Parameters
- **Initial Salary**: $60,000.
- **Years of Service**: 15 years.
- **Salary Growth**: Modeled using year-over-year CPI growth, calculated from the `combined_data` dataset.

## TRS (Teacher Retirement System) Benefit Calculation
1. Calculated annual salaries over the 15-year period by applying CPI growth.
2. Determined the **Final Average Salary (FAS)** as the average of the last 3 years of salaries.
3. Computed the **Annual TRS Benefit** based on:
   - **Years of Service**:
     - 1.67% of FAS for each year of service up to 20 years.
     - Special rules applied for exactly 20 years or more than 20 years.
   - **FAS**: Multiplied by the benefit rate and years of service.
4. Displayed both the annual and monthly TRS benefits.

## Contributions (Employee and Employer)
1. Calculated annual employee and employer contributions based on salary and contribution rules:
   - **Employee Contributions**:
     - 3% to 6% of salary, determined by salary brackets.
   - **Employer Contributions**:
     - 8% for the first 7 years and 10% for subsequent years.
2. Summed contributions for each year and totaled them over the 15-year period.
3. Stored detailed data in a table for yearly contributions.

## ORP (Optional Retirement Plan) Investment Simulation
1. **Portfolio Allocation**:
   - Adjusted allocations for US equities, international equities, and bonds based on age brackets:
     - Ages 50-59: Higher equity allocation.
     - Ages 60-74: Increased bond allocation.
2. Calculated annual performance for each asset class using growth rates from the `combined_data` dataset:
   - US and international equity growth based on stock market performance.
   - Bond yields calculated as annual averages.
3. Simulated yearly portfolio performance using contributions and compound growth.
4. Computed the **Total Accumulated Value** at the end of 15 years.
5. Estimated the **Annual ORP Benefit** as 4% of the final accumulated value.

---
The following code snippets will calculate the retirement benefits for both TRS and ORP based on the assumptions outlined above. We will compare the monthly benefits and accumulated funds for each plan to provide a comprehensive analysis of the retirement options.

```{r}

# Set initial salary and define years of service
initial_salary <- 60000
years_of_service <- 15  # Adjusted to 15 years

# Initialize a vector to store salaries for each year
salaries <- numeric(years_of_service)
salary_growth <- numeric(years_of_service)
cpi_growth <- numeric(years_of_service)
salary_increase <- numeric(years_of_service)

# Set the first salary as the initial salary
salaries[1] <- initial_salary

# Loop through the combined data for yearly salary growth calculation
for (i in 2:years_of_service) {
  # We need CPI data for each September to calculate the salary for the next year
  # Calculate the CPI growth between September (from the previous year) and September of the current year
  
  september_cpi_previous_year <- combined_data$inflation_rate[which(month(combined_data$date) == 9 & year(combined_data$date) == 2008 + (i - 1))]
  september_cpi_current_year <- combined_data$inflation_rate[which(month(combined_data$date) == 9 & year(combined_data$date) == 2008 + i)]
  
  # Calculate the salary growth rate based on CPI change
  cpi_growth[i] <- september_cpi_current_year / september_cpi_previous_year
  salary_growth[i] <- cpi_growth[i]
  
  # Calculate the increase in salary
  salary_increase[i] <- salaries[i-1] * (cpi_growth[i] - 1)  # Difference from the previous salary
  
  # Apply the salary growth to the previous year's salary
  salaries[i] <- salaries[i-1] * cpi_growth[i]  
}

# Calculate Final Average Salary (FAS) - which is the average of the last 3 years' salary
fas <- mean(salaries[(years_of_service-2):years_of_service])

# Calculate the Annual Retirement Benefit based on years of service
if (years_of_service <= 20) {
  annual_benefit <- 0.0167 * fas * years_of_service
} else if (years_of_service == 20) {
  annual_benefit <- 0.0175 * fas * years_of_service
} else {
  annual_benefit <- (0.35 + 0.02 * years_of_service) * fas
}

# Display the results
cat("Annual TRS Benefit: $", round(annual_benefit, 2), "\n")
cat("Monthly TRS Benefit: $", round(annual_benefit/12, 2 ), "\n")


```

```{r}
# Load necessary libraries
library(dplyr)
library(lubridate)

# Initialize parameters
initial_salary <- 60000  # Starting salary
years_of_service <- 15   # Number of years to simulate

# Set up salary contribution brackets
salary_brackets <- c(45000, 55000, 75000, 100000)

# Initialize vectors to store results
salaries <- numeric(years_of_service)
employee_contributions <- numeric(years_of_service)
employer_contributions <- numeric(years_of_service)
total_contributions <- numeric(years_of_service)

# Initialize the first year's salary
salaries[1] <- initial_salary

# Loop through each year and compute the contributions
for (i in 1:years_of_service) {
  
  # Get the salary for the year
  if (i == 1) {
    salary <- initial_salary
  } else {
    # Calculate salary growth based on CPI (only starting from the second year)
    september_cpi_previous_year <- combined_data$inflation_rate[which(month(combined_data$date) == 9 & year(combined_data$date) == 2009 + (i - 1))]
    september_cpi_current_year <- combined_data$inflation_rate[which(month(combined_data$date) == 9 & year(combined_data$date) == 2009 + i)]
    
    # Calculate the salary growth rate based on CPI change (year over year growth)
    cpi_growth <- september_cpi_current_year / september_cpi_previous_year
    salary <- salaries[i - 1] * cpi_growth  # Update salary based on CPI growth
  }
  
  # Store the salary for each year
  salaries[i] <- salary
  
  # Employee contribution calculation based on salary brackets (annual contribution, divided by 12 for monthly)
  if (salary <= salary_brackets[1]) {
    employee_contribution_annual <- salary * 0.03
  } else if (salary <= salary_brackets[2]) {
    employee_contribution_annual <- salary * 0.035
  } else if (salary <= salary_brackets[3]) {
    employee_contribution_annual <- salary * 0.045
  } else if (salary <= salary_brackets[4]) {
    employee_contribution_annual <- salary * 0.0575
  } else {
    employee_contribution_annual <- salary * 0.06
  }
  
  # Convert annual contribution to monthly contribution
  employee_contribution_monthly <- employee_contribution_annual / 12
  
  # Employer contribution: 8% for the first 7 years, 10% after (annual contribution)
  if (i <= 7) {
    employer_contribution_annual <- salary * 0.08
  } else {
    employer_contribution_annual <- salary * 0.10
  }
  
  # Convert annual employer contribution to monthly
  employer_contribution_monthly <- employer_contribution_annual / 12
  
  # Total contribution for the year (monthly contributions summed over 12 months)
  total_contribution_monthly <- employee_contribution_monthly + employer_contribution_monthly
  total_contribution_annual <- total_contribution_monthly * 12  # Multiply by 12 to get the annual total contribution
  
  # Store contributions
  employee_contributions[i] <- employee_contribution_annual
  employer_contributions[i] <- employer_contribution_annual
  total_contributions[i] <- total_contribution_annual
}

# Create the table with the results for each year
yearly_contributions_data <- data.frame(
  Year = 1:years_of_service,
  Salary = round(salaries, 2),
  Employee_Contribution = round(employee_contributions, 2),
  Employer_Contribution = round(employer_contributions, 2),
  Total_Contribution = round(total_contributions, 2)
)

```

```{r}
# Initialize parameters for ORP calculations
# Age 50 to 59
equity_us_alloc_50_59 <- 0.47  # US Equities allocation
equity_international_alloc_50_59 <- 0.32  # International Equities allocation
bonds_alloc_50_59 <- 0.21  # Bonds allocation

# Age 60 to 74
equity_us_alloc_60_74 <- 0.34  # US Equities allocation
equity_international_alloc_60_74 <- 0.23  # International Equities allocation
bonds_alloc_60_74 <- 0.43  # Bonds allocation

# Initialize vectors to store results
performance_us_equity <- numeric(years_of_service)
performance_international_equity <- numeric(years_of_service)
performance_bonds <- numeric(years_of_service)
total_accumulated <- numeric(years_of_service)  # Total accumulated amount

# Starting balance
total_accumulated[1] <- yearly_contributions_data$Total_Contribution[1]

# Start contributing at age 50 in 2009
starting_age <- 50

# Loop through each year to compute performance
for (i in 1:years_of_service) {
  current_year <- 2009 + i - 1  # Current year
  next_year <- current_year + 1  # Next year
  current_age <- starting_age + i - 1  # Current age
  
  # Assign allocations based on age
  if (current_age >= 50 && current_age <= 59) {
    equity_us_alloc <- equity_us_alloc_50_59
    equity_international_alloc <- equity_international_alloc_50_59
    bonds_alloc <- bonds_alloc_50_59
  } else if (current_age >= 60 && current_age <= 74) {
    equity_us_alloc <- equity_us_alloc_60_74
    equity_international_alloc <- equity_international_alloc_60_74
    bonds_alloc <- bonds_alloc_60_74
  }
  
  # Ensure we have data for the future January, or use November of the current year if not available
  if (i == years_of_service) {
    # For the last year, use November data instead of January of the next year
    us_equity_growth <- combined_data$us_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 11)] /
                        combined_data$us_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 1)]
    
    intl_equity_growth <- combined_data$intl_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 11)] /
                          combined_data$intl_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 1)]
    
    bond_yield_annual <- mean(combined_data$bond_yield[which(year(combined_data$date) == current_year & month(combined_data$date) <= 11)]) / 100 + 1
  } else {
    # For all other years, use January of the next year
    us_equity_growth <- combined_data$us_equity_close[which(year(combined_data$date) == next_year & month(combined_data$date) == 1)] /
                        combined_data$us_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 1)]
    
    intl_equity_growth <- combined_data$intl_equity_close[which(year(combined_data$date) == next_year & month(combined_data$date) == 1)] /
                          combined_data$intl_equity_close[which(year(combined_data$date) == current_year & month(combined_data$date) == 1)]
    
    bond_yield_annual <- mean(combined_data$bond_yield[which(year(combined_data$date) == current_year)]) / 100 + 1
  }

  # Store individual performance values
  performance_us_equity[i] <- us_equity_growth
  performance_international_equity[i] <- intl_equity_growth
  performance_bonds[i] <- bond_yield_annual  # Already adjusted with +1
  
  # Calculate total accumulated with contributions and compound effect
  if (i == 1) {
    # First year: Apply performance to the first contribution
    total_accumulated[i] <- yearly_contributions_data$Total_Contribution[i] * (
                              (equity_us_alloc * performance_us_equity[i]) +
                              (equity_international_alloc * performance_international_equity[i]) +
                              (bonds_alloc * performance_bonds[i])
                            )
  } else {
    # Subsequent years: Include previous accumulated total and current contributions
    total_accumulated[i] <- (total_accumulated[i - 1] + yearly_contributions_data$Total_Contribution[i]) * (
                              (equity_us_alloc * performance_us_equity[i]) +
                              (equity_international_alloc * performance_international_equity[i]) +
                              (bonds_alloc * performance_bonds[i])
                            )
  }
}

# Create a data frame with the results
yearly_performance_data <- data.frame(
  Year = 2009:(2009 + years_of_service - 1),
  Age = starting_age:(starting_age + years_of_service - 1),
  US_Equity_Performance = round(performance_us_equity, 4),
  International_Equity_Performance = round(performance_international_equity, 4),
  Bonds_Performance = round(performance_bonds, 4),
  Total_Accumulated = round(total_accumulated, 2)
)

# Print the performance table
print(yearly_performance_data)


```

```{r}
# Load necessary library
library(plotly)

# Calculate total accumulated contributions over time
total_contributions <- cumsum(yearly_contributions_data$Total_Contribution)

# Create a data frame for plotting
plot_data <- data.frame(
  Year = 2009:(2009 + years_of_service - 1),
  Total_Accumulated = total_accumulated,
  Total_Contributions = total_contributions
)

# Create the interactive graph
plot <- plot_ly(plot_data, x = ~Year) %>%
  add_trace(y = ~Total_Accumulated, type = 'scatter', mode = 'lines+markers', name = 'Total Accumulated',
            hovertemplate = 'Year: %{x}<br>Total Accumulated: %{y:.2f}<extra></extra>') %>%
  add_trace(y = ~Total_Contributions, type = 'scatter', mode = 'lines+markers', name = 'Total Contributions',
            hovertemplate = 'Year: %{x}<br>Total Contributions: %{y:.2f}<extra></extra>') %>%
  layout(
    title = 'Interactive Graph: Total Accumulation vs. Contributions',
    xaxis = list(title = 'Year'),
    yaxis = list(title = 'Amount ($)'),
    legend = list(orientation = 'h', x = 0.5, xanchor = 'center')
  )


annual_benefit_opr = 0.04 * total_accumulated[years_of_service]
# Print the plot
# Display the results
cat("Annual OPR Benefit: $", round(annual_benefit_opr, 2), "\n")
cat("Monthly OPR Benefit: $", round(annual_benefit_opr/12 , 2), "\n")

plot


```

##Comparative Analysis of TRS and ORP

```{r}
# Calculate monthly benefits
monthly_benefit_opr <- annual_benefit_opr / 12
monthly_benefit_trs <- annual_benefit / 12

# Create a data frame for plotting
benefit_data <- data.frame(
  Benefit_Type = c("Monthly OPR Benefit", "Monthly TRS Benefit"),
  Amount = c(monthly_benefit_opr, monthly_benefit_trs)
)

# Create the bar plot
benefit_plot <- ggplot(benefit_data, aes(x = Benefit_Type, y = Amount, fill = Benefit_Type)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  geom_text(aes(label = paste0("$", round(Amount, 2))), vjust = -0.5, size = 4) +
  labs(
    title = "Comparison of Monthly OPR and TRS Benefits",
    x = "Benefit Type",
    y = "Amount ($)"
  ) +
  theme_minimal()

# Print the plot
print(benefit_plot)
```

The bar chart illustrates a comparison between the **Monthly OPR Benefit** and the **Monthly TRS Benefit**. Key insights from the visualization are as follows:

1.  **Monthly OPR Benefit**:
    -   The monthly benefit derived from the OPR system is **\$883.35**, as shown by the first bar.
    -   This represents a smaller portion compared to the TRS benefit, reflecting the structure of OPR benefit allocations.
2.  **Monthly TRS Benefit**:
    -   The monthly benefit derived from the TRS system is **\$1769.43**, as shown by the taller second bar.
    -   This indicates a significantly higher payout, suggesting that the TRS system may provide a more robust financial benefit for retirees compared to the OPR system.
3.  **Comparison**:
    -   The TRS benefit is nearly double the OPR benefit, highlighting a substantial disparity between the two systems in terms of monthly payouts.

This comparison provides valuable insight into the financial implications of selecting between the OPR and TRS systems, with the TRS system offering higher monthly benefits. This can serve as a crucial factor for decision-making in retirement planning.

## Fixed-Rate Analysis

To modify the simulation and project an employee's pension benefit (TRS) or withdrawal amount (ORP) from retirement until death, we need to consider several key factors:

Estimated Death Age: We'll assume a reasonable life expectancy for the employee. Cost-of-Living Adjustments (COLA) for TRS: We'll apply annual inflation adjustments to the TRS benefit, which increase by 50% of the CPI each year, capped at 3%. ORP Market Returns: We'll assume long-run average returns for the ORP portfolio, based on historical equity, bond, and international equity returns. Projecting Retirement Income: We will simulate the monthly income over time, considering the employee's longevity and both TRS and ORP scenarios.

I want to expleriment something, lets do just the fist one, the TRS, AND WE WILL MAKE SURE WE CAN DO IT RIGHT. FIRST THE DATA WE GONNA USE IS THE COMBINED_DATA. BECAUSE THE DATA IS NOT PERCENTAGES, WE GONNA USE FOR EVERY SEPTEMBER. THE NEW SALARY. Meaning, you would see the initial salary of 60000, then, the new salary would be in september. To get the new salary you would use wage growth. so YOU WOULD get the september of the first year, I want to expleriment something, lets do just the fist one, the TRS, AND WE WILL MAKE SURE WE CAN DO IT RIGHT. FIRST THE DATA WE GONNA USE IS THE COMBINED_DATA. BECAUSE THE DATA IS NOT PERCENTAGES, WE GONNA USE FOR EVERY SEPTEMBER. to get the new salary, what you would do is use the CPI. So you would see the september cpi fore exapme of the first year and januar, and you would divide september cpi inflation growth and january for the firs one. FOr the second year, you would use september of the first year 2009 and september of the new year of the cpi divided in that way you get the percentage. and you would multiply the salary by that percentage.

with that you would get the new salary for each year. until retirement. Now we need to use this formaula. 0.0167\* FAS \* years of service. so we need to get the FAS, TO GET FAS IS THE average salary for the las 3 years. with the last formula you would get the benefits for the program.
